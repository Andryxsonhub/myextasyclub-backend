// backend/prisma/schema.prisma (VERS√ÉO ATUALIZADA COM DATA DE NASCIMENTO)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  name              String    @unique
  password          String
  bio               String?   @db.Text
  profilePictureUrl String?   @map("profile_picture_url") @db.VarChar(255)
  location          String?
  gender            String?
  createdAt         DateTime  @default(now()) @map("created_at")
  lastSeenAt        DateTime? @map("last_seen_at")
  desires           String?   @db.LongText
  fetishes          String?   @db.LongText
  interests         String?   @db.LongText
  profileType       String?   @map("profile_type")
  pimentaBalance    Int       @default(0)
  
  // !!! CAMPO NOVO ADICIONADO AQUI !!!
  dateOfBirth       DateTime? @map("date_of_birth") @db.Date

  posts             Post[]
  photos            Photo[]
  videos            Video[]

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "posts_author_id_fkey")
  @@map("posts")
}

model PimentaPackage {
  id            Int      @id @default(autoincrement())
  name          String
  priceInCents  Int
  pimentaAmount Int
  createdAt     DateTime @default(now())

  @@map("pimenta_packages")
}

model Photo {
  id          Int      @id @default(autoincrement())
  url         String
  description String?  @db.Text
  authorId    Int      @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("photos")
}

model Video {
  id          Int      @id @default(autoincrement())
  url         String
  description String?  @db.Text
  authorId    Int      @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("videos")
}