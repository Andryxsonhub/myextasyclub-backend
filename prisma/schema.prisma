// backend/prisma/schema.prisma (VERSÃO COMPLETA E FINAL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  name              String    @unique
  password          String
  bio               String?   @db.Text
  profilePictureUrl String?   @map("profile_picture_url") @db.VarChar(255)
  location          String?
  gender            String?
  createdAt         DateTime  @default(now()) @map("created_at")
  lastSeenAt        DateTime? @map("last_seen_at")
  desires           String?   @db.LongText
  fetishes          String?   @db.LongText
  interests         String?   @db.LongText
  profileType       String?   @map("profile_type")
  posts             Post[]
  pimentaBalance    Int       @default(0)

  // RELAÇÃO ADICIONADA: Um usuário pode ter muitas fotos
  photos            Photo[]

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "posts_author_id_fkey")
  @@map("posts")
}

model PimentaPackage {
  id           Int      @id @default(autoincrement())
  name         String
  priceInCents Int
  pimentaAmount Int
  createdAt    DateTime @default(now())

  @@map("pimenta_packages")
}

// ==========================================================
// NOVA TABELA PARA A GALERIA DE FOTOS
// ==========================================================
model Photo {
  id          Int      @id @default(autoincrement())
  url         String   // Caminho para a imagem, ex: "/uploads/photos/photo-1-12345.jpg"
  description String?  @db.Text // Descrição opcional que o usuário vai digitar
  authorId    Int      @map("author_id") // Chave estrangeira para ligar a foto ao usuário
  createdAt   DateTime @default(now()) @map("created_at") // Data de criação

  // Define a relação com o model User
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("photos")
}