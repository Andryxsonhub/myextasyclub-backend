// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SubscriptionPlan {
  id             String @id
  name           String
  priceInCents   Int
  durationInDays Int   
  users          User[]
  @@map("subscription_plans")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  name                 String    @unique
  username             String?   @unique
  password             String
  bio                  String?   @db.Text
  profilePictureUrl    String?   @map("profile_picture_url") @db.VarChar(255)
  coverPhotoUrl        String?   @map("cover_photo_url") @db.VarChar(255) // <-- ADICIONADO AQUI
  location             String?
  gender               String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime? @updatedAt @map("updated_at")
  lastSeenAt           DateTime? @map("last_seen_at")
  desires              String?   @db.LongText
  fetishes             String?   @db.LongText
  interests            String?   @db.LongText
  profileType          String?   @map("profile_type")
  favoritedSuggestions String?   @db.LongText @map("favoritedsuggestions")
  pimentaBalance       Int       @default(0) @map("pimenta_balance")
  dateOfBirth          DateTime? @map("date_of_birth") @db.Date
  isLive               Boolean   @default(false)

  subscriptionPlanId    String?
  subscriptionExpiresAt DateTime?        @map("subscription_expires_at")
  subscriptionPlan      SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])

  posts        Post[]
  photos       Photo[]
  videos       Video[]
  transactions Transaction[]

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id])
  @@index([authorId], map: "posts_author_id_fkey")
  @@map("posts")
}

model PimentaPackage {
  id            Int      @id @default(autoincrement())
  name          String
  priceInCents  Int
  pimentaAmount Int
  createdAt     DateTime @default(now())
  @@map("pimenta_packages")
}

model Photo {
  id          Int      @id @default(autoincrement())
  url         String
  description String?  @db.Text
  authorId    Int      @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  author      User     @relation(fields: [authorId], references: [id])
  @@index([authorId])
  @@map("photos")
}

model Video {
  id          Int      @id @default(autoincrement())
  url         String
  description String?  @db.Text
  authorId    Int      @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  author      User     @relation(fields: [authorId], references: [id])
  @@index([authorId])
  @@map("videos")
}

model Transaction {
  id              String   @id @default(cuid())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  
  productId       String   @map("product_id")
  productType     String   @map("product_type")
  productName     String   @map("product_name")
  
  amountInCents   Int      @map("amount_in_cents")
  pagbankChargeId String?  @unique @map("pagbank_charge_id")
  status          String
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("transactions")
}