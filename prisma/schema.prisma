// backend/prisma/schema.prisma (VERSÃO 100% COMPLETA E CORRIGIDA)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  name              String    @unique
  password          String
  bio               String?   @db.Text
  profilePictureUrl String?   @map("profile_picture_url") @db.VarChar(255)
  location          String?
  gender            String?
  createdAt         DateTime  @default(now()) @map("created_at")
  lastSeenAt        DateTime? @map("last_seen_at")
  desires           String?   @db.LongText
  fetishes          String?   @db.LongText
  interests         String?   @db.LongText
  profileType       String?   @map("profile_type")
  posts             Post[]
  pimentaBalance    Int       @default(0) @map("pimenta_balance")
  photos            Photo[]
  videos            Video[]   // Relação com Vídeos
  transactions      Transaction[]
  live              Live?
  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  authorId  Int      @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  videoUrl  String?  @map("video_url")
  imageUrl  String?  @map("image_url")
  @@map("posts")
}

model PimentaPackage {
  id          Int    @id @default(autoincrement())
  name        String
  amount      Int
  price       Float
  description String?
  transactions Transaction[]
  @@map("pimenta_packages")
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255)
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  @@map("photos")
}

model Transaction {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  packageId  Int      @map("package_id")
  package    PimentaPackage @relation(fields: [packageId], references: [id])
  amount     Int
  pricePaid  Float    @map("price_paid")
  status     String
  createdAt  DateTime @default(now()) @map("created_at")
  @@map("transactions")
}

model Live {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  roomName  String   @unique @map("room_name")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  @@map("lives")
}

// ==========================================================
// MODELO VIDEO ADICIONADO CORRETAMENTE
// ==========================================================
model Video {
  id           Int      @id @default(autoincrement())
  url          String   @db.VarChar(255)
  thumbnailUrl String?  @map("thumbnail_url") @db.VarChar(255)
  title        String?  @db.VarChar(255)
  description  String?  @db.Text
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("videos")
}