// myextasyclub-backend/prisma/schema.prisma
// --- VERSÃO ATUALIZADA (Com Modelos de Denúncia e Bloqueio) ---

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  username         String?  @unique
  name             String?
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  profile          Profile?
  photos           Photo[]
  videos           Video[]
  posts            Post[]
  streams          LiveStream[]  @relation("Host")
  transactions     Transaction[]
  subscription     Subscription?
  viewedProfiles   ProfileView[] @relation("Viewer")
  likesGiven       Like[]        @relation("LikesGiven")
  likesReceived    Like[]        @relation("LikesReceived")
  following        Follow[]      @relation("Following")
  followers        Follow[]      @relation("Followers")
  interests        String?
  desires          String?
  fetishes         String?
  lastSeenAt       DateTime?     @map("last_seen_at")
  pimentaBalance   Int?          @default(0) @map("pimenta_balance")

  // --- INÍCIO DAS ADIÇÕES (F03 E F04) ---
  // Relação para denúncias (usuário denunciado)
  reportsReceived Report[] @relation("Reported")
  // Relação para denúncias (usuário que denunciou)
  reportsMade     Report[] @relation("Reporter")

  // Relação para bloqueios (usuário bloqueado)
  blockedBy       BlockedUser[] @relation("Blocked")
  // Relação para bloqueios (usuário que bloqueou)
  blockedUsers    BlockedUser[] @relation("Blocker")
  // --- FIM DAS ADIÇÕES ---

  @@map("users")
}

model Profile {
  id            Int      @id @default(autoincrement())
  bio           String?  @db.Text
  coverPhotoUrl String?  @map("cover_photo_url")
  avatarUrl     String?  @map("avatar_url")
  location      String?
  gender        String?
  avatarKey     String?  @map("avatar_key")
  coverPhotoKey String?  @map("cover_photo_key")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int      @unique
  views         ProfileView[] @relation("ViewedProfile")

  @@map("profiles")
}

model Photo {
  id          Int      @id @default(autoincrement())
  url         String
  key         String?
  description String?
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int      @map("author_id")

  @@map("photos")
}

model Video {
  id          Int      @id @default(autoincrement())
  url         String
  key         String?
  description String?
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int      @map("author_id")

  @@map("videos")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int      @map("author_id")

  @@map("posts")
}

model LiveStream {
  id        Int      @id @default(autoincrement())
  roomName  String   @unique
  host      User     @relation("Host", fields: [hostId], references: [id])
  hostId    Int
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("live_streams")
}

model Transaction {
  id                   String   @id @default(cuid())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id])
  productId            Int
  productType          String
  productName          String
  amountInCents        Int
  pagbankChargeId      String?  @unique // Campo antigo do PagBank
  mercadopagoPaymentId String?  @unique // Novo campo para o MercadoPago
  status               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("transactions")
}

model SubscriptionPlan {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  priceInCents  Int
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model PimentaPackage {
  id            Int    @id @default(autoincrement())
  name          String @unique
  pimentaAmount Int
  priceInCents  Int

  @@map("pimenta_packages")
}

model ProfileView {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  viewer          User     @relation("Viewer", fields: [viewerId], references: [id], onDelete: Cascade)
  viewerId        Int      @map("viewer_id")
  viewedProfile   Profile  @relation("ViewedProfile", fields: [viewedProfileId], references: [id], onDelete: Cascade)
  viewedProfileId Int      @map("viewed_profile_id")

  @@map("profile_views")
}

model Like {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  liker       User     @relation("LikesGiven", fields: [likerId], references: [id], onDelete: Cascade)
  likerId     Int
  likedUser   User     @relation("LikesReceived", fields: [likedUserId], references: [id], onDelete: Cascade)
  likedUserId Int

  @@unique([likerId, likedUserId])
  @@map("likes")
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@unique([followerId, followingId])
  @@map("follows")
}

model Subscription {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId                  Int
  plan                    SubscriptionPlan @relation(fields: [planId], references: [id])
  mercadopagoSubscriptionId String   @unique
  status                  String
  expiresAt               DateTime
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("subscriptions")
}

// --- NOVO MODELO (F03) ---
model Report {
  id        Int      @id @default(autoincrement())
  reason    String   @db.Text
  createdAt DateTime @default(now())

  // Relação com o usuário DENUNCIADO
  reportedUser   User @relation("Reported", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reportedUserId Int

  // Relação com o usuário DENUNCIANTE
  reporterUser   User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId     Int

  @@map("reports")
}

// --- NOVO MODELO (F04) ---
model BlockedUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relação com o usuário que BLOQUEOU
  blockerUser   User @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId     Int

  // Relação com o usuário que FOI BLOQUEADO
  blockedUser   User @relation("Blocked", fields: [blockedUserId], references: [id], onDelete: Cascade)
  blockedUserId Int

  // Garante que um usuário não possa bloquear o mesmo usuário várias vezes
  @@unique([blockerId, blockedUserId])
  @@map("blocked_users")
}